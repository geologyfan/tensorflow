import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)


def add_layer(inputs, in_size, out_size, activation_function=None):

    weights = tf.Variable(tf.random_normal([in_size,out_size]))
    biases = tf.Variable(tf.zeros([1,out_size])+1)
    w_plus_b = tf.matmul(inputs,weights)+biases
    if activation_function is None:
        outputs = w_plus_b
    else:
        outputs = activation_function(w_plus_b)
    return outputs

def compute_accuracy(v_xs,v_ys):
    global prediction
    y_pre = sess.run(prediction,feed_dict={xs:v_xs})
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys})
    return result

xs = tf.placeholder(tf.float32,[None,784])   #输入
ys = tf.placeholder(tf.float32,[None,10])     #标签

#隐层
l1 = add_layer(xs,784,1000,activation_function=tf.nn.softmax)
l2 = add_layer(l1,1000,1000,activation_function=tf.nn.softmax)

prediction = add_layer(l2,1000,10,activation_function=tf.nn.softmax)  #预测

#损失函数
loss = tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1]))
#loss = tf.reduce_mean(tf.square(ys-prediction))

train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys})
    if i%100 ==0:
        print(compute_accuracy(mnist.test.images,mnist.test.labels))

sess.close()
